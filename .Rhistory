##   }else{trial[ind,'testResult'] <- 0}
## }
##############
#the above uses symptoms only to determine beginning of detection interval. If it's a symptom trial, however, symptoms must be present for testResult=1.
if(trialType == 'symptomTrial'){
trial$testResult<-ifelse(trial$testResult == 1 & trial$symptomatic == 1, 1, 0)
}
trial
})
library(foreach)
library(doParallel)
library(iterators)
library(gsDesign)
library(tidyverse)
library(data.table)
library(mefa)
library(survival)
source('helperFXNs.R')
source('simulationFXNs.R')
source('analyzeFXN.R')
load('paho.Rdata')
params<-makeParms()
###
#get values from helper functions to speed things along (same #s for every simulation)
startPregRate<-params[1,'startPregRate']
cycleProbs<-cycleProbs()
parms<-params[100,]
analyzeTrial(parms)
system.time(analyzeTrial(parms))
trial<-makePop(paho,parms)
parms$regSize<-10
trial<-makePop(paho,parms)
trial
trial<-mergeData(trial,paho,parms)
head(trial)
trial<-simPreg(trial,parms)
head(trial)
summary(trial$conceptionTime)
#Simulate infection. Using weekly total risk, simulate time-to-infection.
#Following this, individuals infected before the immune date (30 days post start) are removed,
#  and all remaining individuals have survival times until first week infectTime <= 1, or Inf for those uninfected
simInf<-function(trial,parms, browse=T) with(parms, {
if(browse) browser()
immuneDate <- as.Date(startDate) + 30 #assuming 1 month until vaccine is protective
trial<-trial[trial$totalRate != 0,] #removing weeks with rates = 0 to avoid problems with rexp() in next step
trial$infectTime<-rexp(nrow(trial),rate=trial$totalRate)
#identify infections prior to protective immunity.
preImmune<-trial[trial$date < as.Date(immuneDate),]
preImmune<-preImmune[preImmune$infectTime<=1,]
trial<-trial[!(trial$date < as.Date(immuneDate)) & !(trial$id %in% preImmune$id),]
#removes all the weeks prior to immunity and all the participants who were infected before immunity
infected<-trial[trial$infectTime<=1,]
infected<-infected[!duplicated(infected$id),]  #takes first instance of infectTime <= 1 for any id
infected$survt<-(infected$date - immuneDate) + 7*infected$infectTime
notInfected<-trial[trial$infectTime>1 & !(trial$id %in% infected$id),]
notInfected<-notInfected[!duplicated(notInfected$id),]
notInfected$survt<- Inf
trial<-rbind(infected,notInfected)
trial<-trial[order(trial$id,trial$date),]
trial$survt<-as.numeric(trial$survt)
trial$status <- ifelse(trial$infectTime <= 1, 1, 0)
trial
})
simInf(trial,parms)
immuneDate <- as.Date(startDate) + 30 #assuming 1 month until vaccine is protective
trial<-trial[trial$totalRate != 0,] #removing weeks with rates = 0 to avoid problems with rexp() in next step
trial$infectTime<-rexp(nrow(trial),rate=trial$totalRate)
head(trial)
#identify infections prior to protective immunity.
preImmune<-trial[trial$date < as.Date(immuneDate),]
preImmune<-preImmune[preImmune$infectTime<=1,]
trial<-trial[!(trial$date < as.Date(immuneDate)) & !(trial$id %in% preImmune$id),]
infections<-trial[trial$infectTime<=1,]
infections$dup<-ifelse(duplicated(infections$id),1,0)
head(infections)
dups<-infections[infections$dup==1,]
dups
infected<-infected[!duplicated(infected$id),] #takes first instance of infectTime <= 1 for any id
infected<-trial[trial$infectTime<=1,]
infected$dup<-ifelse(duplicated(infected$id),1,0)
dups<-infected[infected$dup==1,]
infected<-infected[!duplicated(infected$id),] #takes first instance of infectTime <= 1 for any id
head(infected)
dups$survt<-(dups$date-immuneDate) + 7*dups$infectTime
infected$survt<-(infected$date - immuneDate) + 7*infected$infectTime
notInfected<-trial[trial$infectTime>1 & !(trial$id %in% infected$id),]
notInfected<-notInfected[!duplicated(notInfected$id),]
notInfected$survt<- Inf
trial<-rbind(infected,notInfected)
head(infected)
head(notInfected)
notInfected$dup<-0
trial<-rbind(infected,notInfected)
tail(trial)
trial<-trial[order(trial$id,trial$date),]
trial$survt<-as.numeric(trial$survt)
trial$dupDate<-ifelse(trial$id %in% dups$id, dups$date[dups$id == trial$id],Inf)
trial$dupDate<-ifelse(trial$id %in% dups$id, dups$date[dups$id == trial$id,],Inf)
dups$date
dups$survt
dups$survt<-as.numeric((dups$date-immuneDate) + 7*dups$infectTime)
dups$survt
trial[trial$id %in% dups$id]
trial[trial$id %in% dups$id,]
dups
dups<-dups[!duplicated(dups$id),]
dups
trial$dupDate<-ifelse(trial$id %in% dups$id, dups$date[dups$id == trial$id,],Inf)
trial$dupDate<-ifelse(trial$id %in% dups$id, dups$date[dups$id == trial$id],Inf)
trial[trial$id %in% dups$id,]
trial$dupDate<-ifelse(trial$id %in% dups$id, dups$survt[dups$id == trial$id],Inf)
trial[trial$id %in% dups$id,]
dups
dups$survt[dups$id == trial$id]
#Simulate infection. Using weekly total risk, simulate time-to-infection.
#Following this, individuals infected before the immune date (30 days post start) are removed,
#  and all remaining individuals have survival times until first week infectTime <= 1, or Inf for those uninfected
simInf<-function(trial,parms, browse=F) with(parms, {
if(browse) browser()
immuneDate <- as.Date(startDate) + 30 #assuming 1 month until vaccine is protective
trial<-trial[trial$totalRate != 0,] #removing weeks with rates = 0 to avoid problems with rexp() in next step
trial$infectTime<-rexp(nrow(trial),rate=trial$totalRate)
#identify infections prior to protective immunity.
preImmune<-trial[trial$date < as.Date(immuneDate),]
preImmune<-preImmune[preImmune$infectTime<=1,]
trial<-trial[!(trial$date < as.Date(immuneDate)) & !(trial$id %in% preImmune$id),]
#removes all the weeks prior to immunity and all the participants who were infected before immunity
infected<-trial[trial$infectTime<=1,]
infected$dup<-ifelse(duplicated(infected$id),1,0)
dups<-infected[infected$dup==1,]
multiInfect<-infected[infected$id %in% dups$id,]
multiInfect$survt<-as.numeric((multiInfect$date-immuneDate) + 7*multiInfect$infectTime)
infected<-infected[!duplicated(infected$id) & !(infected$id %in% multiInfect$id),] #takes first instance of infectTime <= 1 for any id
infected$survt<-(infected$date - immuneDate) + 7*infected$infectTime
notInfected<-trial[trial$infectTime>1 & !(trial$id %in% infected$id) & !(trial$id %in% multiInfect$id),]
notInfected<-notInfected[!duplicated(notInfected$id),]
notInfected$dup<-0
notInfected$survt<- Inf
trial<-rbind(infected,notInfected)
trial<-rbind(trial,multiInfect)
trial<-trial[order(trial$id,trial$date),]
trial$survt<-as.numeric(trial$survt)
trial$status <- ifelse(trial$infectTime <= 1, 1, 0)
trial
})
trial<-simInf(trial,parms)
tail(trial)
trial[duplicated(trial$id),]
#Simulate infection. Using weekly total risk, simulate time-to-infection.
#Following this, individuals infected before the immune date (30 days post start) are removed,
#  and all remaining individuals have survival times until first week infectTime <= 1, or Inf for those uninfected
simInf<-function(trial,parms, browse=F) with(parms, {
if(browse) browser()
immuneDate <- as.Date(startDate) + 30 #assuming 1 month until vaccine is protective
trial<-trial[trial$totalRate != 0,] #removing weeks with rates = 0 to avoid problems with rexp() in next step
trial$infectTime<-rexp(nrow(trial),rate=trial$totalRate)
#identify infections prior to protective immunity.
preImmune<-trial[trial$date < as.Date(immuneDate),]
preImmune<-preImmune[preImmune$infectTime<=1,]
trial<-trial[!(trial$date < as.Date(immuneDate)) & !(trial$id %in% preImmune$id),]
#removes all the weeks prior to immunity and all the participants who were infected before immunity
infected<-trial[trial$infectTime<=1,]
infected$dup<-ifelse(duplicated(infected$id),1,0)
dups<-infected[infected$dup==1,]
multiInfect<-infected[infected$id %in% dups$id,]
multiInfect$dup<-1
multiInfect$survt<-as.numeric((multiInfect$date-immuneDate) + 7*multiInfect$infectTime)
infected<-infected[!duplicated(infected$id) & !(infected$id %in% multiInfect$id),] #takes first instance of infectTime <= 1 for any id
infected$survt<-(infected$date - immuneDate) + 7*infected$infectTime
notInfected<-trial[trial$infectTime>1 & !(trial$id %in% infected$id) & !(trial$id %in% multiInfect$id),]
notInfected<-notInfected[!duplicated(notInfected$id),]
notInfected$dup<-0
notInfected$survt<- Inf
trial<-rbind(infected,notInfected)
trial<-rbind(trial,multiInfect)
trial<-trial[order(trial$id,trial$date),]
trial$survt<-as.numeric(trial$survt)
trial$status <- ifelse(trial$infectTime <= 1, 1, 0)
trial
})
trial<-simInf(trial,parms)
trial<-makePop(paho,parms)
trial<-mergeData(trial,paho,parms)
trial<-simPreg(trial,parms)
trial<-simInf(trial,parms)
trial[trial$dup==1,]
#CZS, based on trimester infected.
getCZSoutcome <- function(trial,parms,browse=T) with(parms, {
if(browse) browser()
if(trialType == 'CZStrial'){
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- as.character(Inf)  #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 'First']
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 'Second']
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 'Third']
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
trial[trimesterInfected == 'First', czsProb := CZSTrim1]
trial[trimesterInfected == 'Second', czsProb := CZSTrim2]
trial[trimesterInfected == 'Third', czsProb := CZSTrim3]
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
}
trial
})
getCZSoutcome(trial,parms)
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- as.character(Inf)  #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 'First']
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 'Second']
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 'Third']
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
trial[trial$dup==1,]
multiInfect[,list(n=length(unique(trimesterInfected))), by=id][n>2,]
multiInfect<-trial[trial$dup==1,]
multiInfect[,list(n=length(unique(trimesterInfected))), by=id][n>2,]
multiInfect
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
#CZS, based on trimester infected.
getCZSoutcome <- function(trial,parms,browse=T) with(parms, {
if(browse) browser()
if(trialType == 'CZStrial'){
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect[,list(n=length(unique(trimesterInfected))), by=id][n>2,]
trial[trimesterInfected == 'First', czsProb := CZSTrim1]
trial[trimesterInfected == 'Second', czsProb := CZSTrim2]
trial[trimesterInfected == 'Third', czsProb := CZSTrim3]
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
}
trial
})
trial<-getCZSoutcome(trial,parms)
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect[,list(n=length(unique(trimesterInfected))), by=id][n>2,]
multiInfect
multiInfect[,list(n=length(unique(trimesterInfected))), by=id]
multiInfect[,list(n=length(unique(trimesterInfected) & is.finite(trimesterInfected))), by=id]
multiInfect[,list(n=length(unique(is.finite(trimesterInfected)))), by=id]
multiInfect[,list(n=length(is.finite(unique(trimesterInfected)))), by=id]
x<-unique(multiInfect$trimesterInfected)
length(is.finite(x))
x
str(multiInfect$trimesterInfected)
multiInfect[,list(n=length(!is.infinite(unique(trimesterInfected)))), by=id]
str(x)
is.finite(x)
x[is.finite(x)]
multiInfect[,list(n=length(unique(trimesterInfected[is.finite[trimesterInfected]]))), by=id]
multiInfect[,list(n=length(unique(trimesterInfected))), by=id]
multiInfect[,{list(n=length(is.finite(unique(trimesterInfected))))}]
multiInfect[,{list(n=length(is.finite(unique(trimesterInfected))))},by=id]
is.finite(unique(trimesterInfected))
is.finite(unique(multiInfect$trimesterInfected))
unique(is.finite(multiInfect$trimesterInfected))
multiInfect[,list(n=length(unique(trimesterInfected) & is.finite(trimesterInfected))), by=id]
multiInfect[,{list(n=length(unique(trimesterInfected) & is.finite(trimesterInfected)))},by=id]
x=length(unique(is.finite(multiInfect$trimesterInfected)))
x
n=length(unique(multiInfect$trimesterInfected))
length(unique(multiInfect$trimesterInfected))
multiInfect[,{x=length(unique(is.finite(trimesterInfected))) - 1
n=length(unique(trimesterInfected)) - x
list(n=n)},by=id]
multiInfect[,list(n=length(unique(trimesterInfected) & is.finite(trimesterInfected))), by=id]
n=(length(unique(trimesterInfected)) - x)
n=length(unique(trimesterInfected)) - x
multiInfect<-trial[trial$dup==1,]
multiInfect[,{x=length(unique(is.finite(trimesterInfected))) - 1
n=length(unique(trimesterInfected)) - x
list(n=n)},by=id]
multiInfect[,{x=(length(unique(is.finite(trimesterInfected))) - 1)
n=(length(unique(trimesterInfected)) - x)
list(n=n)},by=id]
multiInfect
is.finite(multiInfect$trimesterInfected[multiInfect[id='Pi1']])
is.finite(multiInfect$trimesterInfected[multiInfect$id='Pi1'])
is.finite(multiInfect$trimesterInfected[multiInfect$id=='Pi1'])
is.finite(multiInfect$trimesterInfected[multiInfect$id=='Tu10'])
unique(is.finite(multiInfect$trimesterInfected[multiInfect$id=='Tu10']))
multiInfect[,{x=length(unique(is.finite(trimesterInfected)))
n=length(unique(trimesterInfected)) - x
list(n=n)},by=id]
multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n:=nn)},by=id]
multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n !=0,]
multiInfect
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n !=0,]
multiInfect<-trial[trial$dup==1,]
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n !=0,]
multiInfect
multiCZSrate=0.21
trial[trimesterInfected == 1, czsProb := CZSTrim1]
trial[trimesterInfected == 2, czsProb := CZSTrim2]
trial[trimesterInfected == 3, czsProb := CZSTrim3]
trial[trial$id %in% multiInfect, czsProb := multiCZSrate]
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
trial[trial$CZS==1,]
trial[trial$dup==1,]
trial[trial$id %in% multiInfect$id, czsProb := multiCZSrate]
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
trial[trial$dup==1,]
parms$multiCZSrate<-.21
#CZS, based on trimester infected.
getCZSoutcome <- function(trial,parms,browse=F) with(parms, {
if(browse) browser()
if(trialType == 'CZStrial'){
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n > 1,]
trial[trimesterInfected == 1, czsProb := CZSTrim1]
trial[trimesterInfected == 2, czsProb := CZSTrim2]
trial[trimesterInfected == 3, czsProb := CZSTrim3]
trial[trial$id %in% multiInfect$id, czsProb := multiCZSrate]
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
trial<-trial[!duplicated(trial$id),]
}
trial
})
trial<-getCZSoutcome(trial,parms)
trial$CZS==1
trial[trial$dup==1,]
parms$regSize<-100
trial<-makePop(paho,parms)
trial<-mergeData(trial,paho,parms)
trial<-simPreg(trial,parms)
trial<-simInf(trial,parms)
trial<-getCZSoutcome(trial,parms)
trial[trial$dup==1,]
#CZS, based on trimester infected.
getCZSoutcome <- function(trial,parms,browse=F) with(parms, {
if(browse) browser()
if(trialType == 'CZStrial'){
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n > 1,]
trial<-trial[!duplicated(trial$id),]
trial[trimesterInfected == 1, czsProb := CZSTrim1]
trial[trimesterInfected == 2, czsProb := CZSTrim2]
trial[trimesterInfected == 3, czsProb := CZSTrim3]
trial$czsProb<-ifelse(trial$trimesterInfected == 1 & trial$id %in% multiInfect$id,0.21,trial$czsProb)
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
}
trial
})
trial<-getCZSoutcome(trial,parms)
trial[trial$dup==1,]
#CZS, based on trimester infected.
getCZSoutcome <- function(trial,parms,browse=T) with(parms, {
if(browse) browser()
if(trialType == 'CZStrial'){
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n > 1,]
trial<-trial[!duplicated(trial$id),]
trial[trimesterInfected == 1, czsProb := CZSTrim1]
trial[trimesterInfected == 2, czsProb := CZSTrim2]
trial[trimesterInfected == 3, czsProb := CZSTrim3]
trial$czsProb<-ifelse(trial$trimesterInfected == 1 & trial$id %in% multiInfect$id,0.21,trial$czsProb)
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
}
trial
})
trial<-getCZSoutcome(trial,parms)
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect
#CZS, based on trimester infected.
getCZSoutcome <- function(trial,parms,browse=F) with(parms, {
if(browse) browser()
if(trialType == 'CZStrial'){
#If conception time is NA, replace with INF, then calculate birthTime and transform to date:
trial$conceptionTime <- replace(trial$conceptionTime, is.na(trial$conceptionTime), Inf)
trial$birthTime <- trial$conceptionTime + 280
trial$birthDate <- as.Date(startDate) + trial$birthTime
trial<-as.data.table(trial)
trial$trimesterInfected <- Inf #keeping a record of trimester infected. Could skip, but useful for debugging
setDT(trial)[conceptionTime <= survt & survt <= (conceptionTime + 93), trimesterInfected := 1]
setDT(trial)[(conceptionTime + 94) <= survt & survt <= (conceptionTime + 184), trimesterInfected := 2]
setDT(trial)[(conceptionTime + 185) <= survt & survt <= (conceptionTime + 280),trimesterInfected := 3]
suppressWarnings(setDT(trial)[conceptionTime == Inf | survt == Inf, trimesterInfected := Inf])
trial$czsProb <- 0
multiInfect<-trial[trial$dup==1,]
multiInfect<-multiInfect[,{x=unique(trimesterInfected)
nnn=x[is.finite(x)]
nn=length(nnn)
list(n=nn)},by=id]
multiInfect<-multiInfect[multiInfect$n > 1,]
trial<-trial[!duplicated(trial$id),]
trial[trimesterInfected == 1, czsProb := CZSTrim1]
trial[trimesterInfected == 2, czsProb := CZSTrim2]
trial[trimesterInfected == 3, czsProb := CZSTrim3]
trial$czsProb<-ifelse(trial$trimesterInfected == 1 & trial$id %in% multiInfect$id,0.21,trial$czsProb)
trial$CZS <- suppressWarnings(rbinom(nrow(trial), 1, prob = trial$czsProb)) #CZS yes/no
}
trial
})
parms$regSize<-1000
trial<-makePop(paho,parms)
trial<-mergeData(trial,paho,parms)
trial<-simPreg(trial,parms)
trial<-simInf(trial,parms)
trial<-getCZSoutcome(trial,parms)
trial[trial$dup==1,]
trial[trial$czsProb==0.21,]
